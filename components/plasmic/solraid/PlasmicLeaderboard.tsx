// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tq758VBsyfTAqwjxk91gRF
// Component: Tt7eHB_5Y9_Y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: tq758VBsyfTAqwjxk91gRF/projectcss
import sty from "./PlasmicLeaderboard.module.css"; // plasmic-import: Tt7eHB_5Y9_Y/css

createPlasmicElementProxy;

export type PlasmicLeaderboard__VariantMembers = {};
export type PlasmicLeaderboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeaderboard__VariantsArgs;
export const PlasmicLeaderboard__VariantProps = new Array<VariantPropType>();

export type PlasmicLeaderboard__ArgsType = {};
type ArgPropType = keyof PlasmicLeaderboard__ArgsType;
export const PlasmicLeaderboard__ArgProps = new Array<ArgPropType>();

export type PlasmicLeaderboard__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  section?: Flex__<"section">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  h1?: Flex__<"h1">;
  h3?: Flex__<"h3">;
};

export interface DefaultLeaderboardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeaderboard__RenderFunc(props: {
  variants: PlasmicLeaderboard__VariantsArgs;
  args: PlasmicLeaderboard__ArgsType;
  overrides: PlasmicLeaderboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "we2kkPqJY2duvSCeoxceFB",
        opId: "db60000b-0f8d-4d81-ae5b-d25eecd3ad31",
        userArgs: {
          filters: [$ctx.params.user_id]
        },
        cacheKey: `plasmic.$.db60000b-0f8d-4d81-ae5b-d25eecd3ad31.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script src=\"https://telegram.org/js/telegram-web-app.js\"></script>\n    <script>\n        window.addEventListener('DOMContentLoaded', (event) => {\n            Telegram.WebApp.expand();\n        });\n    </script>"
            }
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <LoadingBoundary
              data-plasmic-name={"loadingBoundary"}
              data-plasmic-override={overrides.loadingBoundary}
              className={classNames("__wab_instance", sty.loadingBoundary)}
              loadingState={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query.data[0].user_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "not found";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h1>
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query.data[0].twitter_link;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "notfound";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                  </Stack__>
                )}
              </DataCtxReader__>
            </LoadingBoundary>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "section",
    "loadingBoundary",
    "text",
    "freeBox",
    "h1",
    "h3"
  ],
  embedHtml: ["embedHtml"],
  section: ["section", "loadingBoundary", "text", "freeBox", "h1", "h3"],
  loadingBoundary: ["loadingBoundary", "text", "freeBox", "h1", "h3"],
  text: ["text"],
  freeBox: ["freeBox", "h1", "h3"],
  h1: ["h1"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  section: "section";
  loadingBoundary: typeof LoadingBoundary;
  text: "div";
  freeBox: "div";
  h1: "h1";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeaderboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeaderboard__VariantsArgs;
    args?: PlasmicLeaderboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeaderboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeaderboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeaderboard__ArgProps,
          internalVariantPropNames: PlasmicLeaderboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeaderboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeaderboard";
  } else {
    func.displayName = `PlasmicLeaderboard.${nodeName}`;
  }
  return func;
}

export const PlasmicLeaderboard = Object.assign(
  // Top-level PlasmicLeaderboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    section: makeNodeComponent("section"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicLeaderboard
    internalVariantProps: PlasmicLeaderboard__VariantProps,
    internalArgProps: PlasmicLeaderboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLeaderboard;
/* prettier-ignore-end */
